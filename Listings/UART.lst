C51 COMPILER V9.54   UART                                                                  08/17/2016 14:42:40 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\Objects\UART.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE UART.c ROM(COMPACT) OPTIMIZE(8,SPEED) BROWSE DEBUG O
                    -BJECTEXTEND PRINT(.\Listings\UART.lst) TABS(3) OBJECT(.\Objects\UART.obj)

line level    source

   1          /*------------------------------------------------------------------*-
   2             UART.C (v1.00)
   3            ------------------------------------------------------------------
   4             COPYRIGHT
   5             ---------
   6             This code is copyright (c) 2015 by Richard Zhang.
   7          -*------------------------------------------------------------------*/
   8          
   9          #include "Main.h"
  10          #include "Port.h"
  11          
  12          #include "UART.h"
  13          #include "Speech.h"
  14          //#include "Alarm.h"
  15          
  16          // ------ Public variable definitions ------------------------------
  17          bit ID_certificated_G;     // Flag for ID card certificated.
  18          bit Received_finished_G;   // Flag for receiving 6 bytes.
  19          bit Silent_mode_G;         // Flag for silent mode.
  20          tByte ID_certificated_count;     // The count times of ID certificating.
  21          bit Disable_alarm_mode_G;        // Flag for disabling alarm mode.
  22          bit ID_disable_G;          // Disable ID read.
  23          
  24          code tByte IDkey0 _at_ 0x003000;
  25          code tByte IDkey1 _at_ 0x003001;
  26          code tByte IDkey2 _at_ 0x003002;
  27          code tByte IDkey3 _at_ 0x003003;
  28          code tByte IDkey4 _at_ 0x003004;
  29          code tByte IDkey5 _at_ 0x003005;
  30          
  31          // ------ Public variable declarations -----------------------------
  32          extern tByte Speech_time;
  33          extern tByte ID_certificated_time;
  34          extern bit Alarm_G;
  35          extern bit System_EN_G;
  36          extern bit XB_open_flag;
  37          extern tByte hSCH_sleep_EN_time;
  38          extern bit Passwd_reed_switch_port;
  39          
  40          // ------ Private variables ----------------------------------------
  41          tByte Received_cache[7];      // Cache of receiving bytes.
  42          tByte Data_count;             // Counts of receiving data, multi bytes.
  43          tByte Received_count;         // How many bytes received.
  44          
  45          // ------ Private constants ----------------------------------------
  46          
  47          /*------------------------------------------------------------------*-
  48            UART_Init()
  49            Initialisation function for the switch library.
  50          -*------------------------------------------------------------------*/
  51          void UART_Init(tWord Baudrate)
  52             {
  53   1         // Set PCON.6 SMOD0 = 0, 
  54   1         PCON &= 0xbf;
C51 COMPILER V9.54   UART                                                                  08/17/2016 14:42:40 PAGE 2   

  55   1         
  56   1         // Set P1.0 and P1.1 as UART port.
  57   1         AUXR1 &= 0xbf;
  58   1         
  59   1         // Mode 1, Start+8bytes+Stop, SM2 = 0, TI = 1.
  60   1         SCON = 0x5a;
  61   1         
  62   1         // Clear all T1 bits, and set to 8bit auto reload.
  63   1         TMOD &= 0x0f;
  64   1         TMOD |= 0x20;
  65   1         TH1 = TL1 = -(OSC_FREQ/12/32/Baudrate);
  66   1         
  67   1         TR1 = 1;
  68   1         TI = 0;
  69   1         ES = 1;
  70   1      // PS = 1;
  71   1         
  72   1         Received_count = 0;
  73   1         ID_certificated_count = 0;
  74   1         }
  75          
  76          /*-------------------------------------------------
  77             Sendbyte()
  78             Send A byte.
  79          void Sendbyte(tByte character)
  80             {
  81             SBUF = character;
  82             while(!TI);
  83             TI = 0;
  84             }
  85          ----------------------------------------------------*/
  86          
  87          /*-----------------------------------------------------
  88             Senddata()
  89             Send all data.
  90          void Senddata(tByte *addr, tByte datalength)
  91             {
  92             while(datalength--)
  93                {
  94                Sendbyte(*addr++);
  95                }
  96             }
  97          ------------------------------------------------------*/
  98             
  99          /*-----------------------------------------------
 100             UART interrupt
 101          -----------------------------------------------*/
 102          void uart_isr() interrupt 4 
 103             {
 104   1         if(RI)
 105   1            {
 106   2            RI=0;
 107   2            // Receive one byte, and move left.
 108   2            for(Data_count = 5; Data_count > 0; Data_count--)
 109   2               {
 110   3               Received_cache[Data_count] = Received_cache[Data_count-1];
 111   3               }
 112   2            Received_cache[0] = SBUF;
 113   2      
 114   2      
 115   2            // If in Self learning mode, receive 6 bytes.
 116   2            if(!Passwd_reed_switch_port)
C51 COMPILER V9.54   UART                                                                  08/17/2016 14:42:40 PAGE 3   

 117   2               {
 118   3               Received_count += 1;
 119   3               if(Received_count >= 6)
 120   3                  {
 121   4                  Received_count = 0;
 122   4                  
 123   4                  // Set receiving finished flag.
 124   4                  Received_finished_G = 1;
 125   4                  }
 126   3               }
 127   2            else
 128   2               {
 129   3               if((Received_cache[5] == IDkey0)&&(Received_cache[4] == IDkey1)&&(Received_cache[3] == IDkey2))
 130   3                  {
 131   4                  if((Received_cache[2] == IDkey3)&&(Received_cache[1] == IDkey4)&&(Received_cache[0] == IDkey5))
 132   4                     {
 133   5                     
 134   5                     if((ID_disable_G == 0)||(Alarm_G))
 135   5                        {                 
 136   6                        // Clear speech time for tick voice, broadcast tich speech in 100ms.
 137   6                        Speech_time = 0;
 138   6                        Goto_speech(Tick);
 139   6                        // Reset power down count time.
 140   6                        hSCH_sleep_EN_time = 0;
 141   6                        
 142   6                        // If there is a alarm, don't change system status.
 143   6                        if(Alarm_G)
 144   6                           {
 145   7                           Alarm_G = 0;
 146   7                           ID_disable_G = 1;
 147   7                           
 148   7                           // If XB is open, set the flag to prevent alarm again.
 149   7      //                   if(XB_reed_switch_port)
 150   7      //                      {
 151   7      //                      XB_open_flag = 1;
 152   7      //                      }
 153   7                           }
 154   6                        else
 155   6                           {
 156   7                           // 
 157   7                           if(Passwd_reed_switch_port)
 158   7                              ID_certificated_G = 1;                 
 159   7                           }
 160   6                        }
 161   5                     }
 162   4                  }
 163   3               }
 164   2            }
 165   1         }
 166          
 167          /*------------------------------------------------------------------*-
 168            ---- END OF FILE -------------------------------------------------
 169          -*------------------------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    223    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     10    ----
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.54   UART                                                                  08/17/2016 14:42:40 PAGE 4   

   BIT SIZE         =      5    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
