C51 COMPILER V9.54   UART                                                                  04/01/2016 10:06:43 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\Objects\UART.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE UART.c ROM(COMPACT) OPTIMIZE(8,SPEED) BROWSE DEBUG O
                    -BJECTEXTEND PRINT(.\Listings\UART.lst) TABS(3) OBJECT(.\Objects\UART.obj)

line level    source

   1          /*------------------------------------------------------------------*-
   2             UART.C (v1.00)
   3            ------------------------------------------------------------------
   4             COPYRIGHT
   5             ---------
   6             This code is copyright (c) 2015 by Richard Zhang.
   7          -*------------------------------------------------------------------*/
   8          
   9          #include "Main.h"
  10          #include "Port.h"
  11          
  12          #include "UART.h"
  13          #include "Speech.h"
  14          //#include "Alarm.h"
  15          
  16          // ------ Public variable definitions ------------------------------
  17          bit ID_certificated_G;     // Flag for ID card certificated.
  18          bit Received_finished_G;   // Flag for receiving 6 bytes.
  19          bit Silent_mode_G;         // Flag for silent mode.
  20          tByte ID_certificated_count;     // The count times of ID certificating.
  21          bit Disable_alarm_mode_G;        // Flag for disabling alarm mode.
  22          
  23          /*
  24          code tByte IDkey0 _at_ 0x003000;
  25          code tByte IDkey1 _at_ 0x003001;
  26          code tByte IDkey2 _at_ 0x003002;
  27          code tByte IDkey3 _at_ 0x003003;
  28          code tByte IDkey4 _at_ 0x003004;
  29          code tByte IDkey5 _at_ 0x003005;
  30          */
  31          
  32          tByte IDkey0;
  33          tByte IDkey1;
  34          tByte IDkey2;
  35          tByte IDkey3;
  36          tByte IDkey4;
  37          tByte IDkey5;
  38          
  39          // ------ Public variable declarations -----------------------------
  40          extern tByte Speech_time;
  41          extern tByte ID_certificated_time;
  42          extern bit Alarm_G;
  43          extern bit System_EN_G;
  44          
  45          // ------ Private variables ----------------------------------------
  46          tByte Received_cache[7];      // Cache of receiving bytes.
  47          tByte Data_count;             // Counts of receiving data, multi bytes.
  48          tByte Received_count;         // How many bytes received.
  49          
  50          // ------ Private constants ----------------------------------------
  51          
  52          /*------------------------------------------------------------------*-
  53            UART_Init()
  54            Initialisation function for the switch library.
C51 COMPILER V9.54   UART                                                                  04/01/2016 10:06:43 PAGE 2   

  55          -*------------------------------------------------------------------*/
  56          void UART_Init(tWord Baudrate)
  57             {
  58   1         // Set PCON.6 SMOD0 = 0, 
  59   1         PCON &= 0xbf;
  60   1         
  61   1         // Set P1.0 and P1.1 as UART port.
  62   1         AUXR1 &= 0xbf;
  63   1         
  64   1         // Mode 1, Start+8bytes+Stop, SM2 = 0, TI = 1.
  65   1         SCON = 0x5a;
  66   1         
  67   1         // Clear all T1 bits, and set to 8bit auto reload.
  68   1         TMOD &= 0x0f;
  69   1         TMOD |= 0x20;
  70   1         TH1 = TL1 = -(OSC_FREQ/12/32/Baudrate);
  71   1         
  72   1         TR1 = 1;
  73   1         TI = 0;
  74   1         ES = 1;
  75   1         
  76   1         Received_count = 0;
  77   1         ID_certificated_count = 0;
  78   1         }
  79          
  80          /*-------------------------------------------------
  81             Sendbyte()
  82             Send A byte.
  83          ----------------------------------------------------*/
  84          void Sendbyte(tByte character)
  85             {
  86   1         SBUF = character;
  87   1         while(!TI);
  88   1         TI = 0;
  89   1         }
  90          /*-----------------------------------------------------
  91             Senddata()
  92             Send all data.
  93          ------------------------------------------------------*/
  94          void Senddata(tByte *addr, tByte datalength)
  95             {
  96   1         while(datalength--)
  97   1            {
  98   2            Sendbyte(*addr++);
  99   2            }
 100   1         }
 101             
 102          /*-----------------------------------------------
 103             UART interrupt
 104          -----------------------------------------------*/
 105          void uart_isr() interrupt 4 
 106             {
 107   1         if(RI)
 108   1            {
 109   2            RI=0;
 110   2            // Receive one byte, and move left.
 111   2            for(Data_count = 5; Data_count > 0; Data_count--)
 112   2               {
 113   3               Received_cache[Data_count] = Received_cache[Data_count-1];
 114   3               }
 115   2            Received_cache[0] = SBUF;
 116   2      
C51 COMPILER V9.54   UART                                                                  04/01/2016 10:06:43 PAGE 3   

 117   2         test_port = ~test_port;
 118   2      
 119   2            // If in Self learning mode, receive 6 bytes.
 120   2            if(!Passwd_reed_switch_port)
 121   2               {
 122   3               Received_count += 1;
 123   3               if(Received_count >= 6)
 124   3                  {
 125   4                  Received_count = 0;
 126   4                  // Set receiving finished.
 127   4                  Received_finished_G = 1;
 128   4                  
 129   4                  IDkey0 = Received_cache[5];
 130   4                  IDkey1 = Received_cache[4];
 131   4                  IDkey2 = Received_cache[3];
 132   4                  IDkey3 = Received_cache[2];
 133   4                  IDkey4 = Received_cache[1];
 134   4                  IDkey5 = Received_cache[0];
 135   4                  }
 136   3               }
 137   2            else
 138   2               {
 139   3               if((Received_cache[5] == IDkey0)&&(Received_cache[4] == IDkey1)&&(Received_cache[3] == IDkey2))
 140   3                  {
 141   4                  if((Received_cache[2] == IDkey3)&&(Received_cache[1] == IDkey4)&&(Received_cache[0] == IDkey5))
 142   4                     {
 143   5                     if(XB_reed_switch_port == 0)
 144   5                        {
 145   6                        // clear speech time for tick voice, broadcast tich speech in 100ms.
 146   6                        Speech_time = 0;
 147   6                        Goto_speech(Tick);
 148   6                        ID_certificated_G = 1;
 149   6                        }
 150   5      
 151   5                     Alarm_G = 0;
 152   5                     }
 153   4                  }
 154   3               }
 155   2            }
 156   1         }
 157          /*------------------------------------------------------------------*-
 158            ---- END OF FILE -------------------------------------------------
 159          -*------------------------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    264    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     16       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
