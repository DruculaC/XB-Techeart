C51 COMPILER V9.54   UART                                                                  03/23/2016 11:49:18 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\Objects\UART.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE UART.c ROM(SMALL) OPTIMIZE(8,SPEED) BROWSE DEBUG OBJ
                    -ECTEXTEND PRINT(.\Listings\UART.lst) TABS(3) OBJECT(.\Objects\UART.obj)

line level    source

   1          /*------------------------------------------------------------------*-
   2             UART.C (v1.00)
   3            ------------------------------------------------------------------
   4             COPYRIGHT
   5             ---------
   6             This code is copyright (c) 2015 by Richard Zhang.
   7          -*------------------------------------------------------------------*/
   8          
   9          #include "Main.h"
  10          #include "Port.h"
  11          
  12          #include "UART.h"
  13          #include "Speech.h"
  14          #include "Alarm.h"
  15          
  16          // ------ Public variable definitions ------------------------------
  17          bit ID_certificated_G;     // Flag for ID card certificated.
  18          bit Received_finished_G;   // Flag for receiving 6 bytes.
  19          bit Silent_mode_G;         // Flag for silent mode.
  20          tByte ID_certificated_count;     // The count times of ID certificating.
  21          bit Disable_alarm_mode_G;        // Flag for disabling alarm mode.
  22          
  23          code tByte IDkey0 _at_ 0x003000;
  24          code tByte IDkey1 _at_ 0x003001;
  25          code tByte IDkey2 _at_ 0x003002;
  26          code tByte IDkey3 _at_ 0x003003;
  27          code tByte IDkey4 _at_ 0x003004;
  28          code tByte IDkey5 _at_ 0x003005;
  29          
  30          // ------ Public variable declarations -----------------------------
  31          extern tByte Speech_time;
  32          extern tByte ID_certificated_time;
  33          
  34          // ------ Private variables ----------------------------------------
  35          tByte Received_cache[7];      // Cache of receiving bytes.
  36          tByte Data_count;             // Counts of receiving data, multi bytes.
  37          tByte Received_count;         // How many bytes received.
  38          
  39          // ------ Private constants ----------------------------------------
  40          
  41          /*------------------------------------------------------------------*-
  42            UART_Init()
  43            Initialisation function for the switch library.
  44          -*------------------------------------------------------------------*/
  45          void UART_Init(tWord Baudrate)
  46             {
  47   1         // Set PCON.6 SMOD0 = 0, 
  48   1         PCON &= 0xbf;
  49   1         
  50   1         // Set P1.0 and P1.1 as UART port.
  51   1         AUXR1 &= 0xbf;
  52   1         
  53   1         // Mode 1, Start+8bytes+Stop, SM2 = 0, TI = 1.
  54   1         SCON = 0x5a;
C51 COMPILER V9.54   UART                                                                  03/23/2016 11:49:18 PAGE 2   

  55   1         
  56   1         // Clear all T1 bits, and set to 8bit auto reload.
  57   1         TMOD &= 0x0f;
  58   1         TMOD |= 0x20;
  59   1         TH1 = TL1 = -(OSC_FREQ/12/32/Baudrate);
  60   1         
  61   1         TR1 = 1;
  62   1         TI = 0;
  63   1         ES = 1;
  64   1         
  65   1         Received_count = 0;
  66   1         ID_certificated_count = 0;
  67   1         }
  68          
  69          /*-------------------------------------------------
  70             Sendbyte()
  71             Send A byte.
  72          ----------------------------------------------------*/
  73          void Sendbyte(tByte character)
  74             {
  75   1         SBUF = character;
  76   1         while(!TI);
  77   1         TI = 0;
  78   1         }
  79          /*-----------------------------------------------------
  80             Senddata()
  81             Send all data.
  82          ------------------------------------------------------*/
  83          void Senddata(tByte *addr, tByte datalength)
  84             {
  85   1         while(datalength--)
  86   1            {
  87   2            Sendbyte(*addr++);
  88   2            }
  89   1         }
  90             
  91          /*-----------------------------------------------
  92             UART interrupt
  93          -----------------------------------------------*/
  94          void uart_isr() interrupt 4 
  95             {
  96   1         if(RI)
  97   1            {
  98   2            RI=0;
  99   2            // Receive one byte, and move left.
 100   2            for(Data_count = 5; Data_count > 0; Data_count--)
 101   2               {
 102   3               Received_cache[Data_count] = Received_cache[Data_count-1];
 103   3               }
 104   2            Received_cache[0] = SBUF;
 105   2      
 106   2         test_port = ~test_port;
 107   2      
 108   2            
 109   2            // If in Self learning mode, receive 6 bytes.
 110   2            if(Passwd_reed_switch_port)
 111   2               {
 112   3               Received_count += 1;
 113   3               if(Received_count >= 6)
 114   3                  {
 115   4                  Received_count = 0;
 116   4                  // Set receiving finished.
C51 COMPILER V9.54   UART                                                                  03/23/2016 11:49:18 PAGE 3   

 117   4                  Received_finished_G = 1;
 118   4                  }
 119   3               }
 120   2            else
 121   2               {
 122   3               if((Received_cache[5] == IDkey0)&&(Received_cache[4] == IDkey1)&&(Received_cache[3] == IDkey2))
 123   3                  {
 124   4                  if((Received_cache[2] == IDkey3)&&(Received_cache[1] == IDkey4)&&(Received_cache[0] == IDkey5))
 125   4                     {              
 126   5                     // clear speech time for tick voice, broadcast tich speech in 100ms.
 127   5                     Speech_time = 0;     
 128   5                     Goto_speech(Tick);
 129   5                     
 130   5                     // Set 1 after Tick, otherwise Elecmotor will conflict to Tick voice.
 131   5                     ID_certificated_G = 1;
 132   5                     ID_certificated_time = 0;
 133   5                     }
 134   4                  }        
 135   3               }
 136   2            }
 137   1         }
 138          /*------------------------------------------------------------------*-
 139            ---- END OF FILE -------------------------------------------------
 140          -*------------------------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    245    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     10       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
