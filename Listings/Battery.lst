C51 COMPILER V9.54   BATTERY                                                               03/23/2016 11:49:19 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE BATTERY
OBJECT MODULE PLACED IN .\Objects\Battery.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE Battery.c ROM(SMALL) OPTIMIZE(8,SPEED) BROWSE DEBUG 
                    -OBJECTEXTEND PRINT(.\Listings\Battery.lst) TABS(3) OBJECT(.\Objects\Battery.obj)

line level    source

   1          /*------------------------------------------------------------------*-
   2             A.C (v1.00)
   3            ------------------------------------------------------------------
   4             Simple switch interface code, with software debounce.
   5          
   6             COPYRIGHT
   7             ---------
   8             This code is copyright (c) 2001 by Richard Zhang.
   9          -*------------------------------------------------------------------*/
  10          
  11          #include "Main.h"
  12          #include "Port.h"
  13          
  14          #include "Battery.h"
  15          #include "Speech.h"
  16          
  17          // ------ Public variable definitions ------------------------------
  18          tWord u16ADCL;
  19          tWord u16ADC;
  20          tWord Battery_ADC_result;
  21          tByte Battery_level;
  22          
  23          // ------ Public variable declarations -----------------------------
  24          
  25          // ------ Private variables ----------------------------------------
  26          
  27          // ------ Private constants ----------------------------------------
  28          
  29          /*------------------------------------------------------------------*-
  30            Battery_Init()
  31            Initialisation function for the switch library.
  32          -*------------------------------------------------------------------*/
  33          void Battery_Init(void)
  34             {
  35   1         // Disable digital function for P0.6
  36   1         P0DIDS |= 0x40;
  37   1         // ADC0(P0.6) is input-only mode
  38   1         P0M1 |= 0x40;
  39   1         P0M2 &= 0xbf;
  40   1         // Select channel 6 for conversion.
  41   1         AADR2 = 1;
  42   1         AADR1 = 0;
  43   1         AADR0 = 1;
  44   1         // Open interruption
  45   1         EADC = 1;
  46   1         EA = 1;
  47   1         // Open ADC function
  48   1         ADCCON1 |= 0x80;
  49   1         }
  50          
  51          /*------------------------------------------------------------------*-
  52            Battery_detection()
  53            Initialisation function for the switch library.
  54          -*------------------------------------------------------------------*/
C51 COMPILER V9.54   BATTERY                                                               03/23/2016 11:49:19 PAGE 2   

  55          void Battery_detection(void)
  56             {
  57   1         // Detect battery every 2s
  58   1         ADCI = 0;      // Clear ADC flag (ADCI = 0)
  59   1         ADCS = 1;      // ADC run (ADCS = 1)   
  60   1         }
  61          /*------------------------------------------------------------------*-
  62            Battery_broadcast()
  63            Initialisation function for the switch library.
  64          -*------------------------------------------------------------------*/
  65          void Battery_broadcast(void)
  66             {
  67   1         #ifdef Z2
  68   1         if(Battery_ADC_result < 0x21f)
  69   1            Battery_level = 48;
  70   1         else if(Battery_ADC_result > 0x224)
  71   1            Battery_level = 60;
  72   1            
  73   1         switch(Battery_level)
  74   1            {
  75   2            case 48:
  76   2               {
  77   3               // battery is sufficient, battery > 50.5V, 3.14V/4.93V
  78   3               if((Battery_ADC_result >= 0x1ff))
  79   3                  {
  80   4                  Goto_speech(Battery_sufficient);
  81   4                  }
  82   3               // 20km, 49.5V < battery < 50.5V, 3.08V/4.93V
  83   3               else if((Battery_ADC_result < 0x1ff)&&(Battery_ADC_result >= 0x1f7))    
  84   3                  {
  85   4                  Goto_speech(Battery_20km);
  86   4                  }
  87   3               // 15km, 48.8V < battery < 49.5V, 3.03V/4.93V 
  88   3               else if((Battery_ADC_result < 0x1f7)&&(Battery_ADC_result >= 0x1ef))    
  89   3                  {
  90   4                  Goto_speech(Battery_15km);
  91   4                  }
  92   3               // 10km, 48V < battery <48.8V, 2.99V/4.9V
  93   3               else if((Battery_ADC_result < 0x1ef)&&(Battery_ADC_result >= 0x1e6))    
  94   3                  {
  95   4                  Goto_speech(Battery_10km);
  96   4                  }
  97   3               // 5km, 46.8V < battery < 48V, 2.91V/4.9V
  98   3               else if((Battery_ADC_result < 0x1e6)&&(Battery_ADC_result >= 0x1df))    
  99   3                  {
 100   4                  Goto_speech(Battery_5km);
 101   4                  }                     
 102   3               // battery is low, battery < 46.8V, 
 103   3               else if(Battery_ADC_result < 0x1df)
 104   3                  {
 105   4                  Goto_speech(Battery_insufficient);
 106   4                  }        
 107   3               }
 108   2            break;
 109   2            
 110   2            case 60:
 111   2               {
 112   3               // battery is sufficient, battery > 63.5V, 3.95V/4.93V
 113   3               if((Battery_ADC_result >= 0x27e))
 114   3                  {
 115   4                  Goto_speech(Battery_sufficient);
 116   4                  }
C51 COMPILER V9.54   BATTERY                                                               03/23/2016 11:49:19 PAGE 3   

 117   3               // 35km, 62V < battery < 63.5V, 3.86V/4.93V
 118   3               else if((Battery_ADC_result < 0x27e)&&(Battery_ADC_result >= 0x26e))    
 119   3                  {
 120   4                  Goto_speech(Battery_35km);
 121   4                  }
 122   3               // 20km, 60V < battery < 62V, 3.74V/4.93V
 123   3               else if((Battery_ADC_result < 0x26e)&&(Battery_ADC_result >= 0x25b))    
 124   3                  {
 125   4                  Goto_speech(Battery_20km);
 126   4                  }
 127   3               // 15km, 59.3V < battery < 60V, 3.7V/4.93V 
 128   3               else if((Battery_ADC_result < 0x25b)&&(Battery_ADC_result >= 0x255))    
 129   3                  {
 130   4                  Goto_speech(Battery_15km);
 131   4                  }
 132   3               // 10km, 58.3V < battery <59.3V, 3.64V/4.93V
 133   3               else if((Battery_ADC_result < 0x255)&&(Battery_ADC_result >= 0x24c))    
 134   3                  {
 135   4                  Goto_speech(Battery_10km);
 136   4                  }
 137   3               // 5km, 57.6V < battery < 58.3V, 3.6V/4.93V
 138   3               else if((Battery_ADC_result < 0x24c)&&(Battery_ADC_result >= 0x244))    
 139   3                  {
 140   4                  Goto_speech(Battery_5km);
 141   4                  }                     
 142   3               // battery is low, battery < 57.6V, 
 143   3               else if(Battery_ADC_result < 0x244)
 144   3                  {
 145   4                  Goto_speech(Battery_insufficient);
 146   4                  }
 147   3               }
 148   2            }
 149   1         #endif
 150   1         
 151   1         //------------ Withbattery_48V & 60V ------------------------  
 152   1         #ifdef Z3
                 if(Battery_ADC_result < 0x2a0)
                    Battery_level = 48;
                 else if(Battery_ADC_result > 0x2a1)
                    Battery_level = 60;
                    
                 switch(Battery_level)
                    {
                    case 48:
                       {
                       // battery is sufficient, battery > 50.5V, 3.14V/4.93V
                       if((Battery_ADC_result >= 0x261))
                          {
                          Goto_speech(Battery_sufficient);
                          }
                       // 20km, 49.5V < battery < 50.5V, 3.08V/4.93V
                       else if((Battery_ADC_result < 0x261)&&(Battery_ADC_result >= 0x257))    
                          {
                          Goto_speech(Battery_20km);
                          }
                       // 15km, 48.8V < battery < 49.5V, 3.03V/4.93V 
                       else if((Battery_ADC_result < 0x257)&&(Battery_ADC_result >= 0x24d))    
                          {
                          Goto_speech(Battery_15km);
                          }
                       // 10km, 48V < battery <48.8V, 2.99V/4.9V
                       else if((Battery_ADC_result < 0x24d)&&(Battery_ADC_result >= 0x243))    
C51 COMPILER V9.54   BATTERY                                                               03/23/2016 11:49:19 PAGE 4   

                          {
                          Goto_speech(Battery_10km);
                          }
                       // 5km, 46.8V < battery < 48V, 2.91V/4.9V
                       else if((Battery_ADC_result < 0x243)&&(Battery_ADC_result >= 0x236))    
                          {
                          Goto_speech(Battery_5km);
                          }                     
                       // battery is low, battery < 46.8V, 
                       else if(Battery_ADC_result < 0x236)
                          {
                          Goto_speech(Battery_insufficient);
                          }        
                       }
                    break;
                    
                    case 60:
                       {
                       // battery is sufficient, battery > 63.5V, 3.95V/4.93V
                       if((Battery_ADC_result >= 0x2f9))
                          {
                          Goto_speech(Battery_sufficient); 
                          }
                       // 35km, 62V < battery < 63.5V, 3.86V/4.93V
                       else if((Battery_ADC_result < 0x2f9)&&(Battery_ADC_result >= 0x2e5))    
                          {
                          Goto_speech(Battery_35km); 
                          }
                       // 20km, 60V < battery < 62V, 3.74V/4.93V
                       else if((Battery_ADC_result < 0x2e5)&&(Battery_ADC_result >= 0x2cf))    
                          {
                          Goto_speech(Battery_20km); 
                          }
                       // 15km, 59.3V < battery < 60V, 3.7V/4.93V 
                       else if((Battery_ADC_result < 0x2cf)&&(Battery_ADC_result >= 0x2c7))    
                          {
                          Goto_speech(Battery_15km); 
                          }
                       // 10km, 58.3V < battery <59.3V, 3.64V/4.93V
                       else if((Battery_ADC_result < 0x2c7)&&(Battery_ADC_result >= 0x2bd))    
                          {
                          Goto_speech(Battery_10km); 
                          }
                       // 5km, 57.6V < battery < 58.3V, 3.6V/4.93V
                       else if((Battery_ADC_result < 0x2bd)&&(Battery_ADC_result >= 0x2b3))    
                          {
                          Goto_speech(Battery_5km);  
                          }                     
                       // battery is low, battery < 57.6V, 
                       else if(Battery_ADC_result < 0x2b3)
                          {
                          Goto_speech(Battery_insufficient);  
                          }
                       }
                    }
                 #endif
 235   1         }
 236          
 237          /*------------------------------------------------------------------*-
 238            ADC_ISR()
 239            Initialisation function for the switch library.
 240          -*------------------------------------------------------------------*/
C51 COMPILER V9.54   BATTERY                                                               03/23/2016 11:49:19 PAGE 5   

 241          void ADC_ISR(void) interrupt 11
 242             {
 243   1         ADCI = 0;      // Clear ADC flag (ADCI = 0)
 244   1         ADCS = 0;      // ADC stop (ADCS = 0)
 245   1         u16ADCL = ADCCON0;
 246   1         u16ADCL = u16ADCL >> 6;                // ADC[1:0]
 247   1      
 248   1         u16ADC = ADCH;
 249   1         u16ADC = (u16ADC << 2 ) + u16ADCL;     // ADC[9:2] + ADC[1:0]
 250   1         }
 251          
 252          /*------------------------------------------------------------------*-
 253            ---- END OF FILE -------------------------------------------------
 254          -*------------------------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    438    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      7    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
