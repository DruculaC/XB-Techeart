C51 COMPILER V9.54   ELECMOTOR                                                             07/30/2015 15:49:33 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE ELECMOTOR
OBJECT MODULE PLACED IN .\Objects\Elecmotor.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE Elecmotor.c LARGE ROM(COMPACT) OPTIMIZE(8,SPEED) BRO
                    -WSE DEBUG OBJECTEXTEND PRINT(.\Listings\Elecmotor.lst) TABS(3) OBJECT(.\Objects\Elecmotor.obj)

line level    source

   1          /*------------------------------------------------------------------*-
   2             A.C (v1.00)
   3            ------------------------------------------------------------------
   4             Simple switch interface code, with software debounce.
   5          
   6             COPYRIGHT
   7             ---------
   8             This code is copyright (c) 2001 by Richard Zhang.
   9          -*------------------------------------------------------------------*/
  10          
  11          #include "Main.h"
  12          #include "Port.h"
  13          
  14          #include "Elecmotor.h"
  15          
  16          // ------ Public variable definitions ------------------------------
  17          // bit Sw_pressed_G = 0; // The current switch status
  18          
  19          // ------ Public variable declarations -----------------------------
  20          
  21          // ------ Private variables ----------------------------------------
  22          // static bit LED_state_G;
  23          tWord Rotate_time;
  24          bit Rotate_CW_G;
  25          
  26          tByte Magnet_code[3];
  27          bit Coding_G;
  28          tByte Code_time = 0;
  29          tByte Byte_Index = 0;
  30          tByte Bit_Index = 0;
  31           
  32          // ------ Private constants ----------------------------------------
  33          // SW_THRES must be > 1 for correct debounce behaviour
  34          // #define SW_THRES (3)
  35          
  36          /*------------------------------------------------------------------*-
  37            Elecmotor_Init()
  38            Initialisation function for Electronic motor's lock.
  39          -*------------------------------------------------------------------*/
  40          void Elecmotor_Init(void)
  41             {
  42   1         MagnetCon1 = 1;
  43   1         MagnetCon2 = 1;
  44   1         Magnet_code[0] = CmdHead;
  45   1         Magnet_code[1] = CmdAddress;
  46   1         Magnet_code[2] = CmdMode1;
  47   1         Coding_G = 0;
  48   1         }
  49          
  50          /*------------------------------------------------------------------*-
  51            Elecmotor_Init()
  52            Initialisation function for Electronic motor's lock.
  53          -*------------------------------------------------------------------*/
  54          void Elecmotor_update(void)
C51 COMPILER V9.54   ELECMOTOR                                                             07/30/2015 15:49:33 PAGE 2   

  55             {  
  56   1         if(Coding_G == 1)
  57   1            {
  58   2            if(MagnetCon2 == 0)
  59   2               {
  60   3               // whether msb is 1, if yes, maintain 10ms, if not maintain 4ms.
  61   3               if((Magnet_code[Byte_Index] & 0x80) == 0x80)
  62   3                  {
  63   4                  Code_time += 1;
  64   4                  if(Code_time >= 5)   // 5 tickets, about 10ms.
  65   4                     {
  66   5                     Code_time = 0;
  67   5                     Bit_Index += 1;
  68   5                     MagnetCon2 = 1;
  69   5                     // move 1 bit to left.
  70   5                     Magnet_code[Byte_Index] <<= 1;
  71   5                     }
  72   4                  }
  73   3               else
  74   3                  {
  75   4                  Code_time += 1;
  76   4                  if(Code_time >= 2)   // 2 tickets, about 4ms.
  77   4                     {
  78   5                     Code_time = 0;
  79   5                     Bit_Index += 1;
  80   5                     MagnetCon2 = 1;
  81   5                     Magnet_code[Byte_Index] <<= 1;
  82   5                     }     
  83   4                  }
  84   3               
  85   3               if(Bit_Index >= 8)
  86   3                  {
  87   4                  Bit_Index = 0;
  88   4                  Byte_Index += 1;
  89   4                  if(Byte_Index > 2)
  90   4                     {
  91   5                     Byte_Index = 0;
  92   5                     MagnetCon2 = 1;
  93   5                     Coding_G = 0;
  94   5                     }
  95   4                  }        
  96   3               }
  97   2            else
  98   2               {
  99   3               Code_time += 1;
 100   3               if(Code_time >= 2)
 101   3                  {
 102   4                  Code_time = 0;
 103   4                  MagnetCon2 = 0;
 104   4                  }
 105   3               }     
 106   2            }
 107   1         else
 108   1            {
 109   2            // if ratate CW, MagnetCon2 = 0, driving moto to turn CW.
 110   2            if(Rotate_CW_G == 1)
 111   2               {
 112   3               MagnetCon1 = 1;
 113   3               MagnetCon2 = 0;
 114   3               }
 115   2            else
 116   2               {
C51 COMPILER V9.54   ELECMOTOR                                                             07/30/2015 15:49:33 PAGE 3   

 117   3               MagnetCon1 = 0;
 118   3               MagnetCon2 = 1;
 119   3               }
 120   2               
 121   2            Rotate_time += 1; 
 122   2            if(Rotate_time >= 2500)
 123   2               {
 124   3               Rotate_time = 0;
 125   3               Rotate_CW_G = ~Rotate_CW_G;
 126   3               }     
 127   2            }  
 128   1         }
 129          
 130          
 131          /*------------------------------------------------------------------*-
 132            ---- END OF FILE -------------------------------------------------
 133          -*------------------------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    218    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      8    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
