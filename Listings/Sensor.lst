C51 COMPILER V9.54   SENSOR                                                                03/23/2016 11:49:19 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE SENSOR
OBJECT MODULE PLACED IN .\Objects\Sensor.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_v5\C51\BIN\C51.EXE Sensor.c ROM(SMALL) OPTIMIZE(8,SPEED) BROWSE DEBUG O
                    -BJECTEXTEND PRINT(.\Listings\Sensor.lst) TABS(3) OBJECT(.\Objects\Sensor.obj)

line level    source

   1          /*------------------------------------------------------------------*-
   2             A.C (v1.00)
   3            ------------------------------------------------------------------
   4             Simple switch interface code, with software debounce.
   5          
   6             COPYRIGHT
   7             ---------
   8             This code is copyright (c) 2001 by Richard Zhang.
   9          -*------------------------------------------------------------------*/
  10          
  11          #include "Main.h"
  12          #include "Port.h"
  13          
  14          #include "Sensor.h"
  15          #include "Speech.h"
  16          #include "Alarm.h"
  17          
  18          // ------ Public variable definitions ------------------------------
  19          bit Sensor_blocked_G;      // Block sensor detection.
  20          bit Sensor_EN;             // Sensor detection switch, 1 for open, 0 for close.
  21          bit Sensor_delay_EN;       // Delay some time to enable Sensor_EN.
  22          tByte Sensor_delay_time;   // The delay time to really enable Sensor_EN.
  23          
  24          // ------ Public variable declarations -----------------------------
  25          extern bit Sensor_to_alarm;
  26          extern bit Program_blocked_G;
  27          extern bit Disable_alarm_mode_G;
  28          extern tByte Speech_time;
  29          
  30          // ------ Private variables ----------------------------------------
  31          tByte Sensor_time;            // Sensor input signal low voltage time
  32          tWord Sensor_none_time;       // Sensor input signal high voltage time
  33          tByte Sensor_trigger_level;   // Trigger leven for sensor, 1 means first time touch, 
  34                                        // 2 means second time touch continuously, 
  35                                        // 3 means really stolen touch, then alarm.
  36          tWord Sensor_blocked_time;    // Using block time for trigger leven 1 delay, 1.5s.
  37          bit Wire_cut_G;      // Flag for wire cut out.
  38          
  39          // ------ Private constants ----------------------------------------
  40          
  41          /*------------------------------------------------------------------*-
  42            Sensor_update()
  43            Initialisation function for the switch library.
  44          -*------------------------------------------------------------------*/
  45          void Sensor_update(void)
  46             {
  47   1         if((Sensor_blocked_G)||(Program_blocked_G)||(!Sensor_EN))
  48   1            {
  49   2            // detect sensor level 2 after 3s.
  50   2            if(Sensor_trigger_level == 2)
  51   2               {
  52   3               Sensor_blocked_time += 1;
  53   3               if(Sensor_blocked_time > 1500)
  54   3                  {
C51 COMPILER V9.54   SENSOR                                                                03/23/2016 11:49:19 PAGE 2   

  55   4                  Sensor_blocked_G = 0;
  56   4                  Sensor_blocked_time = 0;
  57   4                  return;
  58   4                  }
  59   3               return;
  60   3               }
  61   2            else
  62   2               return;
  63   2            }
  64   1         
  65   1         Sensor_vibration_detect();
  66   1         }
  67          
  68          /*------------------------------------------------------------------*-
  69            Sensor_Init()
  70            Initialisation function for the switch library.
  71          -*------------------------------------------------------------------*/
  72          void Sensor_Init(void)
  73             {
  74   1         // Set PIN3, PIN19 and PIN26 to input mode(high-res mode).
  75   1         P0M1 |= 0x83;
  76   1         P0M2 &= 0x7c;
  77   1         
  78   1         Sensor_time = 0;
  79   1         Sensor_trigger_level = 0;
  80   1         Sensor_blocked_G = 0;
  81   1         Sensor_EN = 0; 
  82   1         Sensor_delay_EN = 0;
  83   1         Sensor_delay_time = 0;
  84   1         }
  85          
  86          /*------------------------------------------------------------------*-
  87            Sensor_reset()
  88            Initialisation function for the switch library.
  89          -*------------------------------------------------------------------*/
  90          void Sensor_reset(void)
  91             {
  92   1         Sensor_time = 0;
  93   1         Sensor_trigger_level = 0;
  94   1         Sensor_blocked_G = 0;
  95   1         Sensor_EN = 0; 
  96   1         }
  97          
  98          /*------------------------------------------------------------------*-
  99            Sensor_enable()
 100            Initialisation function for the switch library.
 101          -*------------------------------------------------------------------*/
 102          void Sensor_enable(void)
 103             {
 104   1         Sensor_EN = 1; 
 105   1         }
 106          
 107          /*------------------------------------------------------------------*-
 108            Sensor_postpone()
 109            Initialisation function for the switch library.
 110          -*------------------------------------------------------------------*/
 111          void Sensor_postpone(void)
 112             {
 113   1         // Enabling sensor detection 20s after ID expiring or closing lock.
 114   1         if(Sensor_delay_EN)
 115   1            {
 116   2            Sensor_delay_time += 1;
C51 COMPILER V9.54   SENSOR                                                                03/23/2016 11:49:19 PAGE 3   

 117   2            if(Sensor_delay_time > 10)
 118   2               {
 119   3               Sensor_delay_EN = 0;
 120   3               Sensor_delay_time = 0;
 121   3               Sensor_enable();
 122   3               }
 123   2            }
 124   1         }
 125          
 126          /*------------------------------------------------------------------*-
 127            Sensor_vibration_detect()
 128            Initialisation function for the switch library.
 129          -*------------------------------------------------------------------*/
 130          void Sensor_vibration_detect(void)
 131             {
 132   1         switch(Sensor_trigger_level)
 133   1            {
 134   2            case 0:
 135   2               {
 136   3               if((!Vertical_sensor)||(!Horizontal_sensor)||(!Micromotion_sensor))
 137   3                  {
 138   4                  Sensor_time += 1;
 139   4                  if(Sensor_time >= 1)
 140   4                     {
 141   5                     Sensor_time = 0;
 142   5                     Sensor_trigger_level = 2;
 143   5                     Sensor_blocked_G = 1;
 144   5                     }
 145   4                  }
 146   3               else
 147   3                  Sensor_time = 0;
 148   3               }
 149   2            break;
 150   2            case 2:
 151   2               {
 152   3               if((!Vertical_sensor)||(!Horizontal_sensor)||(!Micromotion_sensor))
 153   3                  {
 154   4                  Sensor_time += 1;
 155   4                  Sensor_none_time = 0;
 156   4                  if(Sensor_time >= 2)
 157   4                     {
 158   5                     Sensor_time = 0;
 159   5                     Sensor_trigger_level = 3;
 160   5                     Sensor_blocked_G = 1;
 161   5                     Goto_speech(First_touch);
 162   5                     }        
 163   4                  }
 164   3               else
 165   3                  {
 166   4                  Sensor_time = 0;
 167   4                  
 168   4                  Sensor_none_time += 1;
 169   4                  if(Sensor_none_time > 6000)
 170   4                     {
 171   5                     Sensor_none_time = 0;
 172   5                     Sensor_trigger_level = 0;
 173   5                     }
 174   4                  }        
 175   3               }
 176   2            break;
 177   2            case 3:
 178   2               {
C51 COMPILER V9.54   SENSOR                                                                03/23/2016 11:49:19 PAGE 4   

 179   3               if((!Vertical_sensor)||(!Horizontal_sensor)||(!Micromotion_sensor))
 180   3                  {
 181   4                  Sensor_time += 1;
 182   4                  Sensor_none_time = 0;
 183   4                  if(Sensor_time >= 2)
 184   4                     {
 185   5                     Sensor_time = 0;
 186   5                     Sensor_trigger_level = 0;
 187   5                     Sensor_blocked_G = 1;
 188   5                     Sensor_to_alarm = 1;
 189   5                     }        
 190   4                  }
 191   3               else
 192   3                  {
 193   4                  Sensor_time = 0;
 194   4                  
 195   4                  Sensor_none_time += 1;
 196   4                  if(Sensor_none_time > 6000)
 197   4                     {
 198   5                     Sensor_none_time = 0;
 199   5                     Sensor_trigger_level = 0;
 200   5                     }
 201   4                  }        
 202   3               }
 203   2            break;
 204   2            }
 205   1         }
 206          
 207          
 208          /*------------------------------------------------------------------*-
 209            ---- END OF FILE -------------------------------------------------
 210          -*------------------------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    261    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      7    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
